{
  "__type__": "cc.EffectAsset",
  "_name": "pipeline/tonemap",
  "_objFlags": 0,
  "_native": "",
  "techniques": [
    {
      "name": "tonemap",
      "passes": [
        {
          "program": "pipeline/tonemap|tonemap-vs:vert|tonemap-fs:frag",
          "depthStencilState": {
            "depthTest": false,
            "depthWrite": false
          },
          "properties": {
            "u_texSampler": {
              "type": 28,
              "samplerHash": 66186
            },
            "u_blendTexSampler": {
              "type": 28,
              "samplerHash": 66186
            }
          }
        }
      ]
    }
  ],
  "shaders": [
    {
      "hash": 1769238053,
      "glsl3": {
        "vert": "\nprecision highp float;\n\n#define saturate(a) clamp( a, 0.0, 1.0 )\n\nhighp mat4 transposeMat4(in highp mat4 mat) {\n    highp vec4 i0 = mat[0];\n    highp vec4 i1 = mat[1];\n    highp vec4 i2 = mat[2];\n    highp vec4 i3 = mat[3];\n    return mat4(vec4(i0.x, i1.x, i2.x, i3.x),\n                vec4(i0.y, i1.y, i2.y, i3.y),\n                vec4(i0.z, i1.z, i2.z, i3.z),\n                vec4(i0.w, i1.w, i2.w, i3.w));\n}\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n\n  mat4 cc_matViewInv;\n\n  mat4 cc_matProj;\n\n  mat4 cc_matProjInv;\n\n  mat4 cc_matViewProj;\n\n  mat4 cc_matViewProjInv;\n\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n\n  vec4 cc_ambientGround;\n\n};\n\nin vec2 a_position;\nin vec2 a_texCoord;\nout vec2 v_uv;\nout vec4 v_offset;\n\nvec4 vert () {\n  vec4 pos = vec4(a_position, 0, 1);\n  v_uv = a_texCoord * cc_screenScale.xy;\n  v_offset = v_uv.xyxy + cc_nativeSize.zwzw * vec4(1.0, 0.0, 0.0, -1.0);\n\n  return pos;\n}\n\nvoid main() { gl_Position = vert(); }\n",
        "frag": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n\n  mat4 cc_matViewInv;\n\n  mat4 cc_matProj;\n\n  mat4 cc_matProjInv;\n\n  mat4 cc_matViewProj;\n\n  mat4 cc_matViewProjInv;\n\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n\n  vec4 cc_ambientGround;\n\n};\n\n#define saturate(a) clamp( a, 0.0, 1.0 )\n\nhighp mat4 transposeMat4(in highp mat4 mat) {\n    highp vec4 i0 = mat[0];\n    highp vec4 i1 = mat[1];\n    highp vec4 i2 = mat[2];\n    highp vec4 i3 = mat[3];\n    return mat4(vec4(i0.x, i1.x, i2.x, i3.x),\n                vec4(i0.y, i1.y, i2.y, i3.y),\n                vec4(i0.z, i1.z, i2.z, i3.z),\n                vec4(i0.w, i1.w, i2.w, i3.w));\n}\n\nvec3 SRGBToLinear(vec3 gamma)\n{\n\treturn pow(gamma, vec3(2.2));\n\n}\n\nvec3 LinearToSRGB(vec3 linear)\n{\n\treturn pow(linear, vec3(0.454545));\n\n}\nvec3 ACESToneMap(vec3 color) {\n    const float A = 2.51;\n    const float B = 0.03;\n    const float C = 2.43;\n    const float D = 0.59;\n    const float E = 0.14;\n    return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\n\nin vec2 v_uv;\nin vec4 v_offset;\n\nuniform sampler2D u_texSampler;\nuniform sampler2D u_blendTexSampler;\n\nvec3 ToLDR(vec3 color) {\n  #if CC_USE_HDR\n    color *= cc_exposure.x * 1024.0;\n    color = ACESToneMap(color);\n    color = LinearToSRGB(color);\n  #endif\n  return color;\n}\n\nvec4 frag () {\n  #if CC_USE_SMAA\n\n    vec4 a;\n    a.rb = texture(u_blendTexSampler, v_uv).rb;\n\n    a.g = texture(u_blendTexSampler, v_offset.zw).g;\n\n    a.a = texture(u_blendTexSampler, v_offset.xy).a;\n\n    if (dot(a, vec4(1.0)) < 1e-5) {\n      vec4 o = texture(u_texSampler, v_uv);\n      o.rgb = ToLDR(o.rgb);\n      return o;\n    } else {\n      vec2 offset;\n      offset.x = a.a > a.b ? a.a : -a.b;\n      offset.y = a.g > a.r ? -a.g : a.r;\n      if (abs(offset.x) > abs(offset.y)) {\n        offset.y = 0.0;\n      } else {\n        offset.x = 0.0;\n      }\n      vec4 C = texture(u_texSampler, v_uv);\n      C.rgb = ToLDR(C.rgb);\n\n      vec2 uv = v_uv + sign(offset) * cc_nativeSize.zw;\n      vec4 Cop = texture(u_texSampler, uv);\n      Cop.rgb = ToLDR(Cop.rgb);\n\n      float s = abs(offset.x) > abs(offset.y) ? abs(offset.x) : abs(offset.y);\n      C.rgb = pow(C.rgb, vec3(2.2));\n      Cop.rgb = pow(Cop.rgb, vec3(2.2));\n      vec4 mixed = mix(C, Cop, s);\n      mixed.rgb = pow(mixed.rgb, vec3(1.0 / 2.2));\n      return mixed;\n    }\n  #else\n    vec4 o = texture(u_texSampler, v_uv);\n\n    o.rgb = ToLDR(o.rgb);\n    return o;\n  #endif\n}\n\nout vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }\n"
      },
      "glsl1": {
        "vert": "\nprecision highp float;\n\n#define saturate(a) clamp( a, 0.0, 1.0 )\n\nhighp mat4 transposeMat4(in highp mat4 mat) {\n    highp vec4 i0 = mat[0];\n    highp vec4 i1 = mat[1];\n    highp vec4 i2 = mat[2];\n    highp vec4 i3 = mat[3];\n    return mat4(vec4(i0.x, i1.x, i2.x, i3.x),\n                vec4(i0.y, i1.y, i2.y, i3.y),\n                vec4(i0.z, i1.z, i2.z, i3.z),\n                vec4(i0.w, i1.w, i2.w, i3.w));\n}\nuniform vec4 cc_screenScale;\nuniform vec4 cc_nativeSize;\n\nattribute vec2 a_position;\nattribute vec2 a_texCoord;\nvarying vec2 v_uv;\nvarying vec4 v_offset;\n\nvec4 vert () {\n  vec4 pos = vec4(a_position, 0, 1);\n  v_uv = a_texCoord * cc_screenScale.xy;\n  v_offset = v_uv.xyxy + cc_nativeSize.zwzw * vec4(1.0, 0.0, 0.0, -1.0);\n\n  return pos;\n}\n\nvoid main() { gl_Position = vert(); }\n",
        "frag": "\nprecision highp float;\nuniform vec4 cc_nativeSize;\nuniform vec4 cc_exposure;\n\n#define saturate(a) clamp( a, 0.0, 1.0 )\n\nhighp mat4 transposeMat4(in highp mat4 mat) {\n    highp vec4 i0 = mat[0];\n    highp vec4 i1 = mat[1];\n    highp vec4 i2 = mat[2];\n    highp vec4 i3 = mat[3];\n    return mat4(vec4(i0.x, i1.x, i2.x, i3.x),\n                vec4(i0.y, i1.y, i2.y, i3.y),\n                vec4(i0.z, i1.z, i2.z, i3.z),\n                vec4(i0.w, i1.w, i2.w, i3.w));\n}\n\nvec3 SRGBToLinear(vec3 gamma)\n{\n\treturn pow(gamma, vec3(2.2));\n\n}\n\nvec3 LinearToSRGB(vec3 linear)\n{\n\treturn pow(linear, vec3(0.454545));\n\n}\nvec3 ACESToneMap(vec3 color) {\n    const float A = 2.51;\n    const float B = 0.03;\n    const float C = 2.43;\n    const float D = 0.59;\n    const float E = 0.14;\n    return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\n\nvarying vec2 v_uv;\nvarying vec4 v_offset;\n\nuniform sampler2D u_texSampler;\nuniform sampler2D u_blendTexSampler;\n\nvec3 ToLDR(vec3 color) {\n  #if CC_USE_HDR\n    color *= cc_exposure.x * 1024.0;\n    color = ACESToneMap(color);\n    color = LinearToSRGB(color);\n  #endif\n  return color;\n}\n\nvec4 frag () {\n  #if CC_USE_SMAA\n\n    vec4 a;\n    a.rb = texture2D(u_blendTexSampler, v_uv).rb;\n\n    a.g = texture2D(u_blendTexSampler, v_offset.zw).g;\n\n    a.a = texture2D(u_blendTexSampler, v_offset.xy).a;\n\n    if (dot(a, vec4(1.0)) < 1e-5) {\n      vec4 o = texture2D(u_texSampler, v_uv);\n      o.rgb = ToLDR(o.rgb);\n      return o;\n    } else {\n      vec2 offset;\n      offset.x = a.a > a.b ? a.a : -a.b;\n      offset.y = a.g > a.r ? -a.g : a.r;\n      if (abs(offset.x) > abs(offset.y)) {\n        offset.y = 0.0;\n      } else {\n        offset.x = 0.0;\n      }\n      vec4 C = texture2D(u_texSampler, v_uv);\n      C.rgb = ToLDR(C.rgb);\n\n      vec2 uv = v_uv + sign(offset) * cc_nativeSize.zw;\n      vec4 Cop = texture2D(u_texSampler, uv);\n      Cop.rgb = ToLDR(Cop.rgb);\n\n      float s = abs(offset.x) > abs(offset.y) ? abs(offset.x) : abs(offset.y);\n      C.rgb = pow(C.rgb, vec3(2.2));\n      Cop.rgb = pow(Cop.rgb, vec3(2.2));\n      vec4 mixed = mix(C, Cop, s);\n      mixed.rgb = pow(mixed.rgb, vec3(1.0 / 2.2));\n      return mixed;\n    }\n  #else\n    vec4 o = texture2D(u_texSampler, v_uv);\n\n    o.rgb = ToLDR(o.rgb);\n    return o;\n  #endif\n}\n\nvoid main() { gl_FragColor = frag(); }\n"
      },
      "builtins": {
        "globals": {
          "blocks": [
            {
              "name": "CCGlobal",
              "defines": []
            }
          ],
          "samplers": []
        },
        "locals": {
          "blocks": [],
          "samplers": []
        }
      },
      "defines": [
        {
          "name": "CC_USE_HDR",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "CC_USE_SMAA",
          "type": "boolean",
          "defines": []
        }
      ],
      "blocks": [],
      "samplers": [
        {
          "name": "u_texSampler",
          "type": 28,
          "count": 1,
          "defines": [],
          "binding": 30
        },
        {
          "name": "u_blendTexSampler",
          "type": 28,
          "count": 1,
          "defines": [],
          "binding": 31
        }
      ],
      "name": "pipeline/tonemap|tonemap-vs:vert|tonemap-fs:frag"
    }
  ],
  "combinations": []
}